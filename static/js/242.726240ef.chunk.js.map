{"version":3,"file":"static/js/242.726240ef.chunk.js","mappings":"2UAEO,SAAeA,EAAtB,iDAAO,OAAP,oBAAO,WAA+BC,EAAYC,GAA3C,+EACW,kDAEVC,EAAU,CACdC,OAAQF,EAAWE,OACnBC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,KAAMP,IARL,SAYkBQ,EAAAA,EAAAA,IAXP,kDAW0BN,GAZrC,cAYCO,EAZD,yBAcEA,GAdF,kEAiBA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAgCC,EAAOX,GAAvC,+EACW,4CAEVE,EAAU,CACdE,OAAQ,CACNO,MAAAA,EACAN,QAAS,mCACTC,SAAU,QACVC,KAAMP,EACNY,eAAe,IATd,SAakBJ,EAAAA,EAAAA,IAZP,4CAY0BN,GAbrC,cAaCO,EAbD,yBAeEA,GAfF,kEAkBA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,kFACCC,EADD,6CACiDD,GAEhDZ,EAAU,CACdE,OAAQ,CACNC,QAAS,mCACTC,SAAU,UANT,SAUkBE,EAAAA,EAAAA,IAAUO,EAASb,GAVrC,cAUCO,EAVD,yBAYEA,GAZF,kEAeA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA6BF,GAA7B,kFACCC,EADD,6CACiDD,EADjD,YAGCZ,EAAU,CACdE,OAAQ,CACNC,QAAS,mCACTC,SAAU,UANT,SAUkBE,EAAAA,EAAAA,IAAUO,EAASb,GAVrC,cAUCO,EAVD,yBAYEA,GAZF,kEAeA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,kFACCC,EADD,6CACiDD,EADjD,YAGCZ,EAAU,CACdE,OAAQ,CACNC,QAAS,mCACTC,SAAU,UANT,SAUkBE,EAAAA,EAAAA,IAAUO,EAASb,GAVrC,cAUCO,EAVD,yBAYEA,GAZF,kEAeA,SAAeS,EAAtB,iDAAO,OAAP,oBAAO,WAA2BP,EAAOX,GAAlC,+EACW,6CAEVE,EAAU,CACdE,OAAQ,CACNO,MAAAA,EACAN,QAAS,mCACTC,SAAU,QACVC,KAAMP,EACNY,eAAe,IATd,SAakBJ,EAAAA,EAAAA,IAZP,6CAY0BN,GAbrC,cAaCO,EAbD,yBAeEA,GAfF,kE,6GChFMU,EAAOC,EAAAA,GAAAA,GAAH,wRAiBJC,GAJQD,EAAAA,GAAAA,GAAH,+CAIGA,EAAAA,GAAAA,EAAH,mQAKI,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,WAAvB,IAMhB,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,KAAvB,I,6EC5BHC,EAAS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACvB,OACE,SAAC,KAAD,CACEC,QAASD,EACTE,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CACZC,QAAS,QACTC,UAAW,MACXC,WAAY,OACZC,YAAa,SAIpB,C,qKCfYC,EAAWlB,EAAAA,GAAAA,IAAH,gFAMRmB,EAAYnB,EAAAA,GAAAA,IAAH,2GAOToB,EAAQpB,EAAAA,GAAAA,IAAH,iEAKLqB,EAAOrB,EAAAA,GAAAA,KAAH,6CAIJsB,EAAWtB,EAAAA,GAAAA,IAAH,mEAORuB,GAFUvB,EAAAA,GAAAA,IAAH,sBAEKA,EAAAA,GAAAA,EAAH,iH,SCrBTwB,EAAY,SAAC,GAAmB,IAAD,EAAhBC,EAAgB,EAAhBA,UAClBC,EACND,EADMC,MAAOC,EACbF,EADaE,aAAcC,EAC3BH,EAD2BG,YAAaC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAG5DC,EAAaJ,EAAW,6CACYA,GACtCK,EAIJ,OACE,iCACE,UAACf,EAAD,YACE,SAACI,EAAD,CAAUY,IAAKF,EAAYG,IAAKT,KAEhC,UAACP,EAAD,YACE,UAACC,EAAD,kBACGM,QADH,IACGA,EAAAA,EAAS,UADZ,eAEG,IAAIU,KAAKT,GAAcU,qBAF1B,QAE2C,UAF3C,QAIA,0BACE,SAAChB,EAAD,sBADF,KACwC,GAAfQ,GAAmBS,QAAQ,GADpD,QAGA,0BACE,SAACjB,EAAD,yBADF,IACwC,KAAbS,EAAkB,UAAYA,KAGxDC,IACC,0BACE,SAACV,EAAD,uBACmB,IAAlBU,EAAOQ,OACJ,UACAR,EAAOS,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,gBAMjD,0BACE,SAACpB,EAAD,yCAIP,E,yFClDYqB,GAAoB5C,EAAAA,EAAAA,IAAO6C,EAAAA,GAAP7C,CAAH,ujBAgBnB,SAAA8C,GAAC,OAAIA,EAAE3C,MAAMC,OAAO2C,IAAnB,IACU,SAAAD,GAAC,OAAIA,EAAE3C,MAAMC,OAAOC,WAAnB,IAIC,SAAAyC,GAAC,OAAIA,EAAE3C,MAAMC,OAAO4C,UAAnB,IAGL,SAAAF,GAAC,OAAIA,EAAE3C,MAAMC,OAAO4C,UAAnB,ICkDrB,EA9DqB,WAAO,IAAD,IAEjBtD,GAAYuD,EAAAA,EAAAA,MAAZvD,QACFwD,GAAWC,EAAAA,EAAAA,MAEXC,GAAmBC,EAAAA,EAAAA,QAAM,iBAACH,QAAD,IAACA,GAAD,UAACA,EAAUI,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,KAEzD,GAAkCC,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAO/B,EAAP,KAAkBgC,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOhD,EAAP,KAAkBkD,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOlD,EAAP,KAAcqD,EAAd,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBH,GAAa,GACbC,EAAS,MAHQ,UAIMlE,EAAAA,EAAAA,IAAeC,GAJrB,OAIXL,EAJW,OAMjBoE,EAAapE,EAASyE,MANL,gDAQjBH,EAAS,KAAMI,SACfC,QAAQC,IAAI,KAAMF,SATD,yBAWjBL,GAAa,GAXI,4EAAH,qDAclBG,GACD,GAAE,CAACnE,KAGF,iCACE,UAACkD,EAAD,CAAmBsB,GAAId,EAAiBe,QAAxC,WACE,SAAC,MAAD,IADF,iBAKA,SAAC3C,EAAD,CAAWC,UAAWA,KAEtB,UAAC,KAAD,YACE,UAAC,KAAD,CAAeyC,GAAG,OAAlB,WACE,SAAC,MAAD,CAAaE,KAAM,KADrB,WAIA,UAAC,KAAD,CAAeF,GAAG,UAAlB,WACE,SAAC,MAAD,CAAYE,KAAM,KADpB,iBAMF,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UAEE,SAAC,KAAD,OAIF,SAAC/D,EAAA,EAAD,CAAQC,UAAWA,IAElBF,IAAS,SAAC,KAAD,UAAQA,MAGvB,C","sources":["api/fetchData.jsx","components/ListMovies/ListMovies.styled.jsx","components/Loader/Loader.jsx","components/CardMovie/CardMovie.styled.jsx","components/CardMovie/CardMovie.jsx","pages/MovieDitails.styled.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport async function fetchTrendMovie(pageNumber, controller) {\n  const API_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n  // параметри запиту на бекенд\n  const options = {\n    signal: controller.signal,\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n      page: pageNumber,\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchMovieByName(query, pageNumber) {\n  const API_URL = 'https://api.themoviedb.org/3/search/movie';\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      query,\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n      page: pageNumber,\n      include_adult: false,\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchMovieById(movieId) {\n  const API_URL = `https://api.themoviedb.org/3/movie/${movieId}`;\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchCastById(movieId) {\n  const API_URL = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchReviewsById(movieId) {\n  const API_URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchActors(query, pageNumber) {\n  const API_URL = 'https://api.themoviedb.org/3/search/person';\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      query,\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n      page: pageNumber,\n      include_adult: false,\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n`;\n\nexport const Alert = styled.p`\n  position: absolute;\n  top: 140px;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: ${props => props.theme.colors.accentLight};\n  padding: 20px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 20px;\n  font-style: italic;\n  color: ${props => props.theme.colors.error};\n`;\n","import { Dna } from 'react-loader-spinner';\n\nexport const Loader = ({ isLoading }) => {\n  return (\n    <Dna\n      visible={isLoading}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"dna-loading\"\n      wrapperStyle={{\n        display: 'block',\n        marginTop: '5px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const CardWrap = styled.div`\n  display: flex;\n  gap: 30px;\n  margin-bottom: 20px;\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  margin-bottom: 20px;\n`;\n\nexport const Title = styled.div`\n  font-weight: 700;\n  font-size: 20px;\n`;\n\nexport const Info = styled.span`\n  font-weight: 700;\n`;\n\nexport const ImgMovie = styled.img`\n  max-width: 250px;\n  object-fit: cover;\n`;\n\nexport const AddInfo = styled.div``;\n\nexport const TitleInfo = styled.p`\n  text-align: center;\n  font-weight: 700;\n  font-size: 18px;\n  letter-spacing: 2px;\n`;\n","import defaultImage from '../../images/no-poster.png';\nimport {\n  CardWrap,\n  ImgMovie,\n  Info,\n  MovieInfo,\n  Title,\n  TitleInfo,\n} from './CardMovie.styled';\n\nexport const CardMovie = ({ dataMovie }) => {\n  const { title, release_date, poster_path, vote_average, overview, genres } =\n    dataMovie;\n\n  const posterPath = poster_path\n    ? `https://image.tmdb.org/t/p/original${poster_path}`\n    : defaultImage;\n\n  // const releaseYear = new Date(release_date).getFullYear();\n\n  return (\n    <>\n      <CardWrap>\n        <ImgMovie src={posterPath} alt={title} />\n\n        <MovieInfo>\n          <Title>\n            {title ?? 'Unknown'} (\n            {new Date(release_date).getFullYear() ?? 'Unknown'})\n          </Title>\n          <p>\n            <Info>Score: </Info> {(vote_average * 10).toFixed(0)}%\n          </p>\n          <p>\n            <Info>Overview: </Info> {overview === '' ? 'unknown' : overview}\n          </p>\n\n          {genres && (\n            <p>\n              <Info>Genres: </Info>\n              {genres.length === 0\n                ? 'unknown'\n                : genres.map(genre => genre.name).join(', ')}\n            </p>\n          )}\n        </MovieInfo>\n      </CardWrap>\n\n      <div>\n        <TitleInfo>Additional information</TitleInfo>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledNavLinkBack = styled(NavLink)`\n  width: 150px;\n  text-align: center;\n  font-weight: 500;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 10px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  margin-left: 0;\n  margin-right: 0;\n  border-radius: 5px;\n  border: none;\n  text-decoration: none;\n  color: ${p => p.theme.colors.main};\n  background-color: ${p => p.theme.colors.accentLight};\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.accentDark};\n    color: #fff;\n    box-shadow: -2px -2px 5px #fff,\n      2px 2px 5px ${p => p.theme.colors.accentDark};\n  }\n`;\n","import { fetchMovieById } from 'api/fetchData';\nimport { CardMovie } from 'components/CardMovie/CardMovie';\nimport { Alert } from 'components/ListMovies/ListMovies.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  NavWrapper,\n  StyledNavLink,\n} from 'components/SharedLayout/SharedLayout.styled';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { IoIosPeople } from 'react-icons/io';\nimport { VscPreview } from 'react-icons/vsc';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport { StyledNavLinkBack } from './MovieDitails.styled';\n\nconst MovieDetails = () => {\n  // хук useParams() повертає об'єкт з усіма динамічними параметрами, які є в поточному URL\n  const { movieId } = useParams();\n  const location = useLocation();\n  // console.log(location);\n  const backLinkLocation = useRef(location?.state?.from ?? '/');\n\n  const [dataMovie, setDataMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const response = await fetchMovieById(movieId);\n        // console.log(response.data);\n        setDataMovie(response.data);\n      } catch (error) {\n        setError(error.message);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieById();\n  }, [movieId]);\n\n  return (\n    <>\n      <StyledNavLinkBack to={backLinkLocation.current}>\n        <TiArrowBackOutline />\n        Go to back\n      </StyledNavLinkBack>\n\n      <CardMovie dataMovie={dataMovie} />\n\n      <NavWrapper>\n        <StyledNavLink to=\"cast\">\n          <IoIosPeople size={22} />\n          Cast\n        </StyledNavLink>\n        <StyledNavLink to=\"reviews\">\n          <VscPreview size={22} />\n          Reviews\n        </StyledNavLink>\n      </NavWrapper>\n\n      <Suspense fallback={<div>Loading...</div>}>\n        {/* вказати де саме в компоненті батьківського маршруту ми хочемо рендерувати дочірні маршрути */}\n        <Outlet />\n      </Suspense>\n\n      {/* спінер */}\n      <Loader isLoading={isLoading} />\n      {/* помилка запиту */}\n      {error && <Alert>{error}</Alert>}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["fetchTrendMovie","pageNumber","controller","options","signal","params","api_key","language","page","axios","response","fetchMovieByName","query","include_adult","fetchMovieById","movieId","API_URL","fetchCastById","fetchReviewsById","fetchActors","List","styled","Alert","props","theme","colors","accentLight","error","Loader","isLoading","visible","height","width","ariaLabel","wrapperStyle","display","marginTop","marginLeft","marginRight","CardWrap","MovieInfo","Title","Info","ImgMovie","TitleInfo","CardMovie","dataMovie","title","release_date","poster_path","vote_average","overview","genres","posterPath","defaultImage","src","alt","Date","getFullYear","toFixed","length","map","genre","name","join","StyledNavLinkBack","NavLink","p","main","accentDark","useParams","location","useLocation","backLinkLocation","useRef","state","from","useState","setDataMovie","setIsLoading","setError","useEffect","getMovieById","data","message","console","log","to","current","size","Suspense","fallback"],"sourceRoot":""}