{"version":3,"file":"static/js/913.5012bfa9.chunk.js","mappings":"2UAEO,SAAeA,EAAtB,iDAAO,OAAP,oBAAO,WAA+BC,EAAYC,GAA3C,+EACW,kDAEVC,EAAU,CACdC,OAAQF,EAAWE,OACnBC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,KAAMP,IARL,SAYkBQ,EAAAA,EAAAA,IAXP,kDAW0BN,GAZrC,cAYCO,EAZD,yBAcEA,GAdF,kEAiBA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAgCC,EAAOX,GAAvC,+EACW,4CAEVE,EAAU,CACdE,OAAQ,CACNO,MAAAA,EACAN,QAAS,mCACTC,SAAU,QACVC,KAAMP,EACNY,eAAe,IATd,SAakBJ,EAAAA,EAAAA,IAZP,4CAY0BN,GAbrC,cAaCO,EAbD,yBAeEA,GAfF,kEAkBA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,kFACCC,EADD,6CACiDD,GAEhDZ,EAAU,CACdE,OAAQ,CACNC,QAAS,mCACTC,SAAU,UANT,SAUkBE,EAAAA,EAAAA,IAAUO,EAASb,GAVrC,cAUCO,EAVD,yBAYEA,GAZF,kEAeA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA6BF,GAA7B,kFACCC,EADD,6CACiDD,EADjD,YAGCZ,EAAU,CACdE,OAAQ,CACNC,QAAS,mCACTC,SAAU,UANT,SAUkBE,EAAAA,EAAAA,IAAUO,EAASb,GAVrC,cAUCO,EAVD,yBAYEA,GAZF,kEAeA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,kFACCC,EADD,6CACiDD,EADjD,YAGCZ,EAAU,CACdE,OAAQ,CACNC,QAAS,mCACTC,SAAU,UANT,SAUkBE,EAAAA,EAAAA,IAAUO,EAASb,GAVrC,cAUCO,EAVD,yBAYEA,GAZF,kEAeA,SAAeS,EAAtB,iDAAO,OAAP,oBAAO,WAA2BP,EAAOX,GAAlC,+EACW,6CAEVE,EAAU,CACdE,OAAQ,CACNO,MAAAA,EACAN,QAAS,mCACTC,SAAU,QACVC,KAAMP,EACNY,eAAe,IATd,SAakBJ,EAAAA,EAAAA,IAZP,6CAY0BN,GAbrC,cAaCO,EAbD,yBAeEA,GAfF,kE,sEChFMU,E,QAAcC,GAAAA,OAAH,mhBAeF,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,WAAnB,IAIC,SAAAH,GAAC,OAAIA,EAAEC,MAAMC,OAAOE,UAAnB,IAGL,SAAAJ,GAAC,OAAIA,EAAEC,MAAMC,OAAOE,UAAnB,I,SCrBRC,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OAAO,SAACR,EAAD,CAAaS,QAASD,EAAtB,sBACR,C,6GCHYE,EAAOT,EAAAA,GAAAA,GAAH,wRAiBJU,GAJQV,EAAAA,GAAAA,GAAH,+CAIGA,EAAAA,GAAAA,EAAH,mQAKI,SAAAW,GAAK,OAAIA,EAAMT,MAAMC,OAAOC,WAAvB,IAMhB,SAAAO,GAAK,OAAIA,EAAMT,MAAMC,OAAOS,KAAvB,I,6EC5BHC,EAAS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACvB,OACE,SAAC,KAAD,CACEC,QAASD,EACTE,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CACZC,QAAS,QACTC,UAAW,MACXC,WAAY,OACZC,YAAa,SAIpB,C,8ECjBM,IAAMC,EAAsB,oCAEtBC,EAAsB,CACjCC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACV/B,MAAO,O,0GCRIgC,EAAgBlC,EAAAA,GAAAA,IAAH,qdAeJ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOE,UAAnB,IAKV8B,EAAanC,EAAAA,GAAAA,KAAH,8KAUVoC,EAAcpC,EAAAA,GAAAA,MAAH,oRAgBXqC,EAAYrC,EAAAA,GAAAA,OAAH,2VAcV,SAAAW,GAAK,OAAIA,EAAMT,MAAMC,OAAOE,UAAvB,I,iDC9CJiC,EAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACpC,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAkBA,OACE,UAACT,EAAD,YACE,UAACC,EAAD,CAAYI,SAdK,SAAAK,GACnBA,EAAEC,iBAEgB,KAAdH,GACFI,EAAAA,GAAAA,MAAA,UAAetB,EAAAA,GAAuBC,EAAAA,GAGxCc,EAASG,GAETC,EAAa,GACd,EAIG,WACE,SAACN,EAAD,CAAWU,KAAK,SAAhB,UACE,SAAC,MAAD,CAAUC,KAAK,UAGjB,SAACZ,EAAD,CACEa,MAAOP,EACPQ,SAzBc,SAAAN,GACpBD,EAAaC,EAAEO,cAAcF,MAAMG,OAAOC,cAC3C,EAwBON,KAAK,OACLO,aAAa,MACbC,WAAS,EACTf,YAAaA,QAGjB,SAAC,KAAD,MAGL,C,kQCpDYgB,EAAaxD,EAAAA,GAAAA,GAAH,wGAOVyD,EAAYzD,EAAAA,GAAAA,GAAH,uHAOT0D,EAAW1D,EAAAA,GAAAA,IAAH,qHAOR2D,EAAY3D,EAAAA,GAAAA,KAAH,yFAMT4D,EAAgB5D,EAAAA,GAAAA,KAAH,wF,mBCuF1B,EAhGe,WAEb,OAA4ByC,EAAAA,EAAAA,UAAS,IAArC,eAAOoB,EAAP,KAAeC,EAAf,KACA,GAAkCrB,EAAAA,EAAAA,WAAS,GAA3C,eAAO3B,EAAP,KAAkBiD,EAAlB,KACA,GAA0BtB,EAAAA,EAAAA,UAAS,MAAnC,eAAO7B,EAAP,KAAcoD,EAAd,KACA,GAAoCvB,EAAAA,EAAAA,UAAS,GAA7C,eAAO7D,EAAP,KAAmBqF,EAAnB,KACA,GAAkCxB,EAAAA,EAAAA,UAAS,MAA3C,eAAOyB,EAAP,KAAkBC,EAAlB,KAGA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAMAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACR7B,EAAS,UAAG2B,EAAaG,IAAI,gBAApB,QAAgC,GAC/C,GAAK9B,EAAL,CAGA,IAAM+B,EAAS,mCAAG,oGAEdV,GAAa,GACbC,EAAS,MAHK,UAISlE,EAAAA,EAAAA,IAAY4C,EAAW9D,GAJhC,UAIRS,EAJQ,OAMdqF,QAAQC,IAAItF,EAASuF,MAEgB,IAAjCvF,EAASuF,KAAKC,QAAQC,OARZ,wBASZhC,EAAAA,GAAAA,MAAA,mEAEErB,EAAAA,GAXU,2BAedqC,GAAU,SAAAiB,GAAI,wBAAQA,IAAR,OAAiB1F,EAASuF,KAAKC,SAA/B,IACdV,EAAa9E,EAASuF,KAAKI,aAhBb,kDAkBdb,EAAa,MACbL,EAAU,IACVE,EAAS,KAAMiB,SACfP,QAAQC,IAAI,KAAMM,SArBJ,yBAuBdlB,GAAa,GAvBC,6EAAH,qDA0BfU,GA3BC,CA4BF,GAAE,CAACJ,EAAczF,IAclB,OADA8F,QAAQC,IAAI/F,IAEV,iCACE,SAAC0D,EAAA,EAAD,CAAWC,SAbM,SAAAhD,GACnB+E,EAAgB,CAAE/E,MAAAA,IAClB0E,EAAc,GACdH,EAAU,IACVK,EAAa,KACd,EAQsC3B,YAAY,mBAC/C,SAACgB,EAAD,UACGK,EAAOqB,KAAI,SAAAC,GAAK,OACf,UAAC1B,EAAD,YACE,SAACC,EAAD,CACE0B,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxCC,EAENC,IAAG,UAAKJ,EAAMK,SAEhB,SAAC7B,EAAD,UAAYwB,EAAMK,QAClB,SAAC5B,EAAD,UAAgBuB,EAAMM,aACtB,yBAAIN,EAAMO,WAAWC,QAAQ,GAA7B,SAXcR,EAAMS,GADP,OAkBnB,SAAC/E,EAAA,EAAD,CAAQC,UAAWA,IAGlBoD,EAAYtF,IAAc,SAAC0B,EAAA,EAAD,CAAQC,SA7BpB,WACjB0D,GAAc,SAAAc,GAAI,OAAIA,EAAO,CAAX,GACnB,IA8BInE,IAAS,SAAC,KAAD,UAAQA,KAElB,SAAC,IAAD,MAGL,C","sources":["api/fetchData.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/ListMovies/ListMovies.styled.jsx","components/Loader/Loader.jsx","components/Notification/Notification.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Actor.styled.jsx","pages/Actors.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport async function fetchTrendMovie(pageNumber, controller) {\n  const API_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n  // параметри запиту на бекенд\n  const options = {\n    signal: controller.signal,\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n      page: pageNumber,\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchMovieByName(query, pageNumber) {\n  const API_URL = 'https://api.themoviedb.org/3/search/movie';\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      query,\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n      page: pageNumber,\n      include_adult: false,\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchMovieById(movieId) {\n  const API_URL = `https://api.themoviedb.org/3/movie/${movieId}`;\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchCastById(movieId) {\n  const API_URL = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchReviewsById(movieId) {\n  const API_URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n\nexport async function fetchActors(query, pageNumber) {\n  const API_URL = 'https://api.themoviedb.org/3/search/person';\n  // параметри запиту на бекенд\n  const options = {\n    params: {\n      query,\n      api_key: '6eb92bed4e8effdfb5cc4dc890c8b1e8',\n      language: 'en-US',\n      page: pageNumber,\n      include_adult: false,\n    },\n  };\n\n  const response = await axios.get(API_URL, options);\n  // console.log(response.data);\n  return response;\n}\n","import styled from 'styled-components';\n\nexport const BtnLoadMore = styled.button`\n  width: 150px;\n  text-align: center;\n  font-weight: 500;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 8px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 5px;\n  border: none;\n  background-color: ${p => p.theme.colors.accentLight};\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.accentDark};\n    color: #fff;\n    box-shadow: -2px -2px 5px #fff,\n      2px 2px 5px ${p => p.theme.colors.accentDark};\n  }\n`;\n","import { BtnLoadMore } from './Button.styled';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({ loadMore }) => {\n  return <BtnLoadMore onClick={loadMore}>Load more</BtnLoadMore>;\n};\n\nButton.propTypes = {\n  loadMore: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n`;\n\nexport const Alert = styled.p`\n  position: absolute;\n  top: 140px;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: ${props => props.theme.colors.accentLight};\n  padding: 20px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 20px;\n  font-style: italic;\n  color: ${props => props.theme.colors.error};\n`;\n","import { Dna } from 'react-loader-spinner';\n\nexport const Loader = ({ isLoading }) => {\n  return (\n    <Dna\n      visible={isLoading}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"dna-loading\"\n      wrapperStyle={{\n        display: 'block',\n        marginTop: '5px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }}\n    />\n  );\n};\n","export const notificationMassege = 'Please enter something for seach.';\n\nexport const notificationOptions = {\n  position: 'top-center',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'dark',\n};\n","import styled from 'styled-components';\n\nexport const SearchbarWrap = styled.div`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  margin-bottom: 16px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: ${p => p.theme.colors.accentDark};\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 8px;\n  padding-right: 8px;\n  &::placeholder {\n    font: inherit;\n    font-size: 16px;\n    font-style: italic;\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  outline: none;\n\n  :hover {\n    opacity: 1;\n  }\n\n  :hover svg {\n    fill: ${props => props.theme.colors.accentDark};\n    transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n    transform: scale(1.1);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { BiSearch } from 'react-icons/bi';\nimport {\n  SearchbarWrap,\n  SearchBtn,\n  SearchForm,\n  SearchInput,\n} from './Searchbar.styled';\nimport { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  notificationMassege,\n  notificationOptions,\n} from '../Notification/Notification';\n\nexport const Searchbar = ({ onSubmit, placeholder }) => {\n  const [textQuery, setTextQuery] = useState('');\n\n  const onChangeInput = e => {\n    setTextQuery(e.currentTarget.value.trim().toLowerCase());\n  };\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    // уведомление\n    if (textQuery === '') {\n      toast.error(`${notificationMassege}`, notificationOptions);\n    }\n    //фун-я onSubmit пришла из App через пропсы\n    onSubmit(textQuery);\n    //очистка строки поиска\n    setTextQuery('');\n  };\n\n  return (\n    <SearchbarWrap>\n      <SearchForm onSubmit={onSubmitForm}>\n        <SearchBtn type=\"submit\">\n          <BiSearch size=\"24\" />\n        </SearchBtn>\n\n        <SearchInput\n          value={textQuery}\n          onChange={onChangeInput}\n          type=\"text\"\n          autocomplete=\"off\"\n          autoFocus\n          placeholder={placeholder}\n        />\n      </SearchForm>\n      <ToastContainer />\n    </SearchbarWrap>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListActors = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 10px;\n`;\n\nexport const ItemActor = styled.li`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  background-color: #fff;\n`;\n\nexport const ImgActor = styled.img`\n  max-width: 175px;\n  object-fit: cover;\n  margin-bottom: 5px;\n  /* border: solid 1px */\n`;\n\nexport const NameActor = styled.span`\n  font-weight: 700;\n  margin-bottom: 5px;\n  max-width: 175px;\n`;\n\nexport const CarecterActor = styled.span`\n  font-style: italic;\n  max-width: 175px;\n  font-size: 14px;\n`;\n","import { fetchActors } from 'api/fetchData';\nimport { Button } from 'components/Button/Button';\n// import { ListMovie } from 'components/ListMovies/ListMovies';\nimport { Alert } from 'components/ListMovies/ListMovies.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { useEffect, useState } from 'react';\nimport ScrollToTop from 'react-scroll-to-top';\nimport { toast } from 'react-toastify';\nimport { notificationOptions } from '../components/Notification/Notification';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  CarecterActor,\n  ImgActor,\n  ItemActor,\n  ListActors,\n  NameActor,\n} from './Actor.styled';\nimport actorImage from '../images/anonymous.jpg';\n\nconst Movies = () => {\n  // const [textQuery, setTextQuery] = useState('');\n  const [actors, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [totalPage, setTotalPage] = useState(null);\n\n  //Він повертає масив із двох значень: об'єкт параметрів рядка запиту (примірник URLSearchParams) для поточного URL та функцію оновлення рядка запиту. Для отримання значень параметрів є метод URLSearchParams.get(key), який чекає на ім'я параметра і повертає його значення або null якщо у рядку запиту немає такого параметра.\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  //Повертає об'єкт розташування, що представляє поточний URL, щоразу коли ми переходимо новим маршрутом або оновлюємо частину поточного URL.\n  // const location = useLocation();\n  // console.log(location);\n\n  useEffect(() => {\n    const textQuery = searchParams.get('query') ?? '';\n    if (!textQuery) {\n      return;\n    }\n    const getActors = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const response = await fetchActors(textQuery, pageNumber);\n\n        console.log(response.data);\n\n        if (response.data.results.length === 0) {\n          toast.error(\n            `Sorry, there are no find movie with this name. Please try again.`,\n            notificationOptions\n          );\n          return;\n        }\n        setMovies(prev => [...prev, ...response.data.results]);\n        setTotalPage(response.data.total_pages);\n      } catch (error) {\n        setTotalPage(null);\n        setMovies([]);\n        setError(error.message);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getActors();\n  }, [searchParams, pageNumber]);\n\n  // записываем запрос поиска из Searchbar\n  const handleSubmit = query => {\n    setSearchParams({ query });\n    setPageNumber(1);\n    setMovies([]);\n    setTotalPage(null);\n  };\n\n  const onLoadMore = () => {\n    setPageNumber(prev => prev + 1);\n  };\n  console.log(pageNumber);\n  return (\n    <>\n      <Searchbar onSubmit={handleSubmit} placeholder=\"Search actors\" />\n      <ListActors>\n        {actors.map(actor => (\n          <ItemActor key={actor.id}>\n            <ImgActor\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                  : actorImage\n              }\n              alt={`${actor.name}`}\n            />\n            <NameActor>{actor.name}</NameActor>\n            <CarecterActor>{actor.character}</CarecterActor>\n            <p>{actor.popularity.toFixed(1)}%</p>\n          </ItemActor>\n        ))}\n      </ListActors>\n\n      {/* спінер */}\n      <Loader isLoading={isLoading} />\n\n      {/* кнопка завантажити ще */}\n      {totalPage > pageNumber && <Button loadMore={onLoadMore} />}\n\n      {/* помилка запиту */}\n      {error && <Alert>{error}</Alert>}\n\n      <ScrollToTop />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["fetchTrendMovie","pageNumber","controller","options","signal","params","api_key","language","page","axios","response","fetchMovieByName","query","include_adult","fetchMovieById","movieId","API_URL","fetchCastById","fetchReviewsById","fetchActors","BtnLoadMore","styled","p","theme","colors","accentLight","accentDark","Button","loadMore","onClick","List","Alert","props","error","Loader","isLoading","visible","height","width","ariaLabel","wrapperStyle","display","marginTop","marginLeft","marginRight","notificationMassege","notificationOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","SearchbarWrap","SearchForm","SearchInput","SearchBtn","Searchbar","onSubmit","placeholder","useState","textQuery","setTextQuery","e","preventDefault","toast","type","size","value","onChange","currentTarget","trim","toLowerCase","autocomplete","autoFocus","ListActors","ItemActor","ImgActor","NameActor","CarecterActor","actors","setMovies","setIsLoading","setError","setPageNumber","totalPage","setTotalPage","useSearchParams","searchParams","setSearchParams","useEffect","get","getActors","console","log","data","results","length","prev","total_pages","message","map","actor","src","profile_path","actorImage","alt","name","character","popularity","toFixed","id"],"sourceRoot":""}